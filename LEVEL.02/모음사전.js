function solution(word){
  // 설명 1.
  const digit = [781, 156, 31, 6, 1];
  const vowel = ['A', 'E', 'I', 'O', 'U']
  
  // 설명 2.
  return word.split('').reduce((a,c,i) => 
    a + digit[i] *  vowel.indexOf(c) + 1, 0)
}


// 설명 1.
// digit 배열은 각 인덱스 번째의 문자가 바뀔 때, 추가되는 숫자를 의미한다. 
// 무슨 말이냐면, 예를 들어, AAAAA와 AAAAE를 비교하면, AAAAA는 5번째이며 AAAAE는 6번째이다.
// 즉 5번째 문자열이 바뀔 땐 AAAAA + 1 * vowel.indexOf(바뀐 문자열)을 해주면 되는 것이다.
// AAAA와 AAAE도 살펴보면, AAAA는 4번째에 위치하고 AAAE는 10번째에 위치한다. 이는 4번째 문자열은 6의 간격을 갖는다는 의미로 AAAI는 16 번째, AAAO는 22번째, AAAU는 28번째에 위치하게 된다. 



// 설명 2.
// 매개변수 word 배열의 각 문자열을 모두 순환하기 위해서 split 메서드를 통해 분리 했으며, 이후 reduce 메서드를 통해 첫번째 문자의 순서부터 더해나간다. 
// 만약 word로 EIO가 주어졌다면, 가장 먼저 첫번째 문자인 'E' 사전의 몇 번 째에 존재하는지 찾는다. (E는 781번째 위치)
// 그 다음 EI가 몇번 째에 있는지 찾아야 하는데, 이는 E의 위치 + 두번째 문자가 I인 경우로 찾을 수 있다. 두번째 문자가 I려면 156 * 2 인 312 만큼을 781에 더해주면 된다.
// 이러한 원리로 EIO는 781 + 312 + 93 + 1 = 1187
